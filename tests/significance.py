import scipy.stats as stats
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#300 training images Dataset
"""
fusion_IoU = [0.8456296920776367, 0.8231863975524902, 0.8323723077774048, 0.8065193891525269, 0.853040337562561, 0.779777467250824, 0.8334035873413086, 0.8227640986442566, 0.8242654204368591, 0.8218393325805664]
fusion_F1 = [0.9102001190185547, 0.8916281461715698, 0.895847499370575, 0.8854640126228333, 0.9154802560806274, 0.8560321927070618, 0.9008628726005554, 0.891095757484436, 0.8930608034133911, 0.8889360427856445]
fusion_precision = [0.9361903667449951, 0.9109013676643372, 0.9381046295166016, 0.9079286456108093, 0.9290487170219421, 0.945119321346283, 0.9327863454818726, 0.896541953086853, 0.9316450953483582, 0.9071054458618164]
fusion_recall = [0.8901894688606262, 0.8909415006637573, 0.8773261904716492, 0.877053439617157, 0.9087356328964233, 0.8120794892311096, 0.880116879940033, 0.8988487124443054, 0.8728185296058655, 0.8863074779510498]
fusion_training_time = [1284.92, 1770.70, 1151.14, 1265.03, 1509.15, 1092.35, 1450.12, 1764.87, 835.93, 1155.06]
fusion_inference_time = [0.03716887127269398, 0.03246726411761659, 0.03253900643550989, 0.03259258559255889, 0.03347130255265669, 0.03187087087920218, 0.03141422705216841, 0.032189072984637634, 0.03257575902071866, 0.03344756184202252]

rgb_iou = [0.8104, 0.7997, 0.8308, 0.8403, 0.8175, 0.7939, 0.8214, 0.8380, 0.8053, 0.8186]
rgb_f1 = [0.8835, 0.8734, 0.8993, 0.9084, 0.8846, 0.8710, 0.8877, 0.9050, 0.8735, 0.8899]
rgb_precision = [0.9254345297813416, 0.9135575890541077, 0.9333645701408386, 0.9157202243804932, 0.9010971784591675, 0.916436493396759, 0.9204868674278259, 0.9198874235153198, 0.9267853498458862, 0.9224536418914795]
rgb_recall = [0.8691414594650269, 0.8670827150344849, 0.8881102800369263, 0.8783594965934753, 0.8817247152328491, 0.8938162326812744, 0.8780952095985413, 0.8560060858726501, 0.895085871219635, 0.8460414409637451]
rgb_training_time = [267.66, 321.83, 444.03, 353.80, 316.40, 291.23, 369.68, 400.87, 327.50, 269.44]
rgb_inference_time = [0.02474003127126983, 0.02032429521734064, 0.020626696673306553, 0.02033815961895567, 0.02057233001246597, 0.020687609007864288, 0.02004926854913885, 0.02090942498409387, 0.020699147022131718, 0.020732735142563328]

rgb_ir_iou = [0.8603353500366211, 0.8534227013587952, 0.8564544916152954, 0.8670772314071655, 0.8563562035560608, 0.8546502590179443, 0.8561155200004578, 0.8619412183761597, 0.8635213375091553, 0.8558455109596252]
rgb_ir_f1 = [0.9201040267944336, 0.9156062602996826, 0.917998194694519, 0.9251164197921753, 0.9174926280975342, 0.9162375330924988, 0.9173014760017395, 0.9209006428718567, 0.9222842454910278, 0.9173701405525208]
rgb_ir_precision = [0.940501868724823, 0.9405944347381592, 0.9175294041633606, 0.9403547644615173, 0.9421055316925049, 0.9322125315666199, 0.9459946155548096, 0.9386456608772278, 0.9392919540405273, 0.9305249452590942]
rgb_ir_recall = [0.9073808193206787, 0.9007394313812256, 0.9256730675697327, 0.9140843152999878, 0.9018212556838989, 0.9086824059486389, 0.8983797430992126, 0.9115302562713623, 0.9123995304107666, 0.9119364619255066]
rgb_ir_training_time = [361.24, 324.14, 289.16, 281.85, 307.28, 271.90, 297.51, 353.00, 327.85, 330.47]
rgb_ir_inference_time = [0.026786688602331913, 0.022996599023992367, 0.022095037229133373, 0.021898240754098602, 0.02189970738960035, 0.022136168046431107, 0.021437449888749557, 0.021139535036954014, 0.02113296768882058, 0.022025325081565163]


"""
#150 training images Dataset
"""
fusion_IoU = [0.6609821319580078, 0.6555767059326172, 0.6776677966117859, 0.6784079074859619, 0.683897852897644, 0.6895888447761536, 0.6447031497955322, 0.6817044615745544, 0.6974907517433167, 0.6930604577064514]
fusion_F1 = [0.7659578919410706, 0.7608004212379456, 0.7780500650405884, 0.7826518416404724, 0.7895084619522095, 0.784987211227417, 0.7525204420089722, 0.7802173495292664, 0.8007029891014099, 0.797812283039093]
fusion_precision = [0.8501341938972473, 0.8574011921882629, 0.8266854286193848, 0.8545320630073547, 0.8338108062744141, 0.8429596424102783, 0.8392729163169861, 0.8472412824630737, 0.8481334447860718, 0.8390887379646301]
fusion_recall = [0.7379553318023682, 0.7348806858062744, 0.7637524604797363, 0.7619135975837708, 0.7764228582382202, 0.7827751040458679, 0.7360661029815674, 0.7670258283615112, 0.7951783537864685, 0.7996332049369812]
fusion_training_time = [969.95, 1041.44, 991.59, 816.42, 690.13, 1168.49, 1138.29, 774.51, 837.82, 1152.73]
fusion_inference_time = [0.0364755129814148, 0.03237478971481323, 0.032213490009307864, 0.03263756513595581, 0.03161103487014771, 0.03162442922592163, 0.03167688846588135, 0.032104568481445314, 0.03198659896850586, 0.03201300144195557]

rgb_IoU = [0.6290138363838196, 0.6485245227813721, 0.6681326031684875, 0.6460736989974976, 0.6751046776771545, 0.6330831050872803, 0.640870988368988, 0.6475020051002502, 0.6310896277427673, 0.6508333683013916]
rgb_F1 =  [0.7375502586364746, 0.7572742700576782, 0.7749645113945007, 0.7450141906738281, 0.7838250994682312, 0.7450137138366699, 0.7496798038482666, 0.7490460276603699, 0.7351855635643005, 0.7569698095321655]
rgb_precision = [0.8484324812889099, 0.8004934787750244, 0.855510950088501, 0.828626275062561, 0.8400769829750061, 0.8304464817047119, 0.823357105255127, 0.8210782408714294, 0.7996325492858887, 0.8245174288749695]
rgb_recall = [0.705751359462738, 0.7557541131973267, 0.7585931420326233, 0.7358869910240173, 0.772736668586731, 0.7110848426818848, 0.7348005771636963, 0.736758291721344, 0.7161781191825867, 0.7438958883285522]
rgb_training_time = [392.54, 306.46,  275.62, 312.12, 267.59, 390.66, 315.60, 370.15, 307.08, 349.30]
rgb_inference_time = [0.02424677610397339, 0.020989277362823487, 0.02009260892868042, 0.020041925907135008, 0.020074524879455567, 0.020105228424072266, 0.020140225887298583, 0.020046989917755127, 0.02009493350982666, 0.020042593479156493]


rgb_ir_IoU = [0.7204399108886719, 0.735909104347229, 0.7114688158035278, 0.71355140209198, 0.7210077047348022, 0.7199722528457642, 0.7161685228347778, 0.7381810545921326, 0.7403489947319031, 0.7033548951148987]
rgb_ir_F1 = [0.8138923645019531, 0.8293201327323914, 0.8091087937355042, 0.8094202280044556, 0.8143477439880371, 0.8197906017303467, 0.8114209771156311, 0.832054615020752, 0.8350836038589478, 0.8015888929367065]
rgb_ir_precision = [0.854154109954834, 0.841978132724762, 0.8346388339996338, 0.8509284257888794, 0.8531238436698914, 0.8427965044975281, 0.8455503582954407, 0.8537756204605103, 0.8551849126815796, 0.864866316318512]
rgb_ir_recall = [0.8090885281562805, 0.8376625180244446, 0.8183495402336121, 0.7964251041412354, 0.813138484954834, 0.8285816311836243, 0.8135621547698975, 0.842631459236145, 0.8417608737945557, 0.7767106890678406]
rgb_ir_training_time = [331.60, 402.83, 303.95, 421.76, 363.29, 339.97, 451.56, 319.15, 368.00, 313.62]
rgb_ir_inference_time = [0.02546787738800049, 0.021612212657928467, 0.021768016815185545, 0.021229896545410156, 0.020867652893066406, 0.021507387161254884, 0.02081465482711792, 0.020841805934906005, 0.020870654582977294, 0.020777840614318848]
"""

#75 training images Dataset
"""
fusion_IoU = [0.6304159760475159, 0.5985770225524902, 0.612906813621521, 0.6071501970291138, 0.6126234531402588, 0.6125524640083313, 0.6473525762557983, 0.5721817016601562, 0.6170665621757507, 0.6019647121429443]
fusion_F1 = [0.7355136275291443, 0.7128382325172424, 0.7213715314865112, 0.7047984600067139, 0.7150160074234009, 0.7146912217140198, 0.748618483543396, 0.6786147952079773, 0.7216756343841553, 0.7106720209121704]
fusion_precision = [0.8299034237861633, 0.8248817920684814, 0.8212370276451111, 0.8080577850341797, 0.8069779872894287, 0.8209850192070007, 0.8369370102882385, 0.7988770008087158, 0.851389467716217, 0.8109037280082703]
fusion_recall = [0.7168473601341248, 0.6796354055404663, 0.6915429830551147, 0.6867826581001282, 0.7083631157875061, 0.7011734247207642, 0.7152538299560547, 0.6577483415603638, 0.6867544054985046, 0.6929635405540466]
fusion_training_time = [553.00, 997.02, 471.96, 821.43, 811.46, 502.28, 507.97, 682.63, 850.92, 655.82]
fusion_inference_time = [0.03256141185760498, 0.03162968397140503, 0.03195613622665405, 0.03180356740951538, 0.03162001371383667, 0.03175234794616699, 0.03167767524719238, 0.031663403511047364, 0.031628284454345706, 0.031752185821533205]

rgb_IoU = [0.544189453125, 0.522980272769928, 0.5052087903022766, 0.436346173286438, 0.45466431975364685, 0.5541731119155884, 0.5027971267700195, 0.5072473287582397, 0.559797465801239, 0.3746106028556824]
rgb_F1 =  [0.6437339782714844, 0.633655846118927, 0.6103895306587219, 0.5438068509101868, 0.5529637336730957, 0.6659839153289795, 0.6062508821487427, 0.6133514642715454, 0.6639139652252197, 0.46509796380996704]
rgb_precision = [0.7521644830703735, 0.7705279588699341, 0.7166515588760376, 0.7235956788063049, 0.6822119951248169, 0.7305411696434021, 0.7280576229095459, 0.7221769094467163, 0.7488166093826294, 0.666259765625]
rgb_recall = [0.6235783100128174, 0.5883345603942871, 0.5785710215568542, 0.48706480860710144, 0.5386322140693665, 0.6745510101318359, 0.5812769532203674, 0.5999324917793274, 0.6405879259109497, 0.41657882928848267]
rgb_training_time = [140.76, 119.27, 76.60, 77.82, 103.14, 94.60, 111.76, 85.67, 94.49, 112.14]
rgb_inference_time = [0.02121292591094971, 0.020784008502960204, 0.019782054424285888, 0.01960111618041992, 0.020422825813293456, 0.019898180961608888, 0.020133936405181886, 0.020564460754394533, 0.01981356143951416, 0.020021722316741944]


rgb_ir_IoU = [0.5431749820709229, 0.5659253001213074, 0.5796657204627991, 0.6501533389091492, 0.5537291169166565, 0.6071853041648865, 0.6150622367858887, 0.5876942873001099, 0.5302245616912842, 0.5703843832015991]
rgb_ir_F1 = [0.6460161805152893, 0.6664665341377258, 0.6824936866760254, 0.7632781863212585, 0.6540212035179138, 0.7180535197257996, 0.7200575470924377, 0.6885603070259094, 0.6297062039375305, 0.6679180860519409]
rgb_ir_precision = [0.7824720144271851, 0.767415463924408, 0.7751535773277283, 0.7644031047821045, 0.7452197074890137, 0.755850613117218, 0.7737115621566772, 0.7877134680747986, 0.7486498355865479, 0.766326904296875]
rgb_ir_recall = [0.6221457719802856, 0.6671560406684875, 0.686299741268158, 0.8136035203933716, 0.6404266357421875, 0.7520217895507812, 0.7344262599945068, 0.6908274292945862, 0.6068583130836487, 0.6566419005393982]
rgb_ir_training_time = [99.34, 80.03, 90.29, 116.92, 80.15, 82.25, 82.49, 110.35, 82.29, 92.40]
rgb_ir_inference_time = [0.023327858448028566, 0.02065871477127075, 0.02111328125, 0.02147003173828125, 0.021662890911102295, 0.02180447816848755, 0.02158538579940796, 0.022649943828582764, 0.02100773811340332, 0.020687925815582275]
"""


array_names = ['RGB F1', '4-Channel F1', 'Fusion F1']
arrays = [rgb_f1, four_ch_f1, fusion_F1]

# Print side-by-side comparison
print(f"{array_names[0]}\t\t{array_names[1]}\t\t{array_names[2]}\t\tDifference (1-2)   Difference (1-3)")
print("-" * 60)
for val1, val2, val3 in zip(*arrays):
    print(f"{val1:.4f}\t\t{val2:.4f}\t\t{val3:.4f}\t\t{val1 - val2:.4f}   \t{val1 - val3:.4f}")

# Calculate paired t-Test between all combinations
for i in range(len(arrays)):
    for j in range(i + 1, len(arrays)):
        diff = np.array(arrays[i]) - np.array(arrays[j])
        t_stat, p_value = stats.ttest_rel(arrays[i], arrays[j])
        mean_diff = np.mean(diff)
        std_diff = np.std(diff, ddof=1)
        n = len(diff)
        t_value = stats.t.ppf((1 + 0.95) / 2, df=n - 1)
        margin_of_error = t_value * (std_diff / np.sqrt(n))
        conf_interval = (mean_diff - margin_of_error, mean_diff + margin_of_error)

        print(f"\nComparison between {array_names[i]} and {array_names[j]}:")
        print(f"T-statistic: {t_stat:.4f}, p-value: {p_value:.4f}")
        print(f"Mean Difference: {mean_diff:.4f} ± {std_diff/np.sqrt(n):.4f}")
        print(f"95% Confidence Interval (t-Test): ({conf_interval[0]:.4f}, {conf_interval[1]:.4f})\n")

# Error Bar Plot for all arrays
means = [np.mean(arr) for arr in arrays]
ses = [np.std(arr, ddof=1) / np.sqrt(len(arr)) for arr in arrays]
y_min = min([m - se for m, se in zip(means, ses)]) - 0.005
y_max = max([m + se for m, se in zip(means, ses)]) + 0.005

plt.figure(figsize=(8, 6))
bars = plt.bar(array_names, means, yerr=ses, capsize=10, color=['gray', 'lightblue', 'lightgreen'])
plt.ylabel('F1 Score')  # Manually setting the y-axis title
plt.ylim([y_min, y_max])
plt.title('F1 Score for 300img Dataset')

# Annotate bars with mean and standard error
for bar, mean, se in zip(bars, means, ses):
    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + se + 0.0005,
             f'Mean: {mean:.4f}\nSE: ±{se:.4f}', ha='center', va='bottom', fontsize=9)

plt.legend([f'Mean ± SE'], loc='upper right')
plt.show()

# Bootstrap Distribution Plot for Differences between arrays
plt.figure(figsize=(15, 5))
for i in range(len(arrays) - 1):
    for j in range(i + 1, len(arrays)):
        diff = np.array(arrays[i]) - np.array(arrays[j])
        n_bootstraps = 10000
        bootstrapped_means = [np.mean(np.random.choice(diff, size=n, replace=True)) for _ in range(n_bootstraps)]
        lower_bootstrap, upper_bootstrap = np.percentile(bootstrapped_means, [2.5, 97.5])
        
        sns.histplot(bootstrapped_means, bins=30, kde=True, label=f"{array_names[i]} - {array_names[j]}")
        plt.axvline(lower_bootstrap, color='blue', linestyle=':', label=f"95% CI Bootstrap {array_names[i]} - {array_names[j]}")
        plt.axvline(upper_bootstrap, color='blue', linestyle=':')

plt.axvline(0, color='black', linestyle='-', label="Mean Difference")
plt.title("Bootstrap Distribution of Mean Differences")
plt.xlabel("Difference in Inference Time")
plt.ylabel("Frequency")
plt.legend()
plt.show()